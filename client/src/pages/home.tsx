import { useState } from "react";
import { Link } from "wouter";
import ScenarioSelector from "@/components/ScenarioSelector";
import ChatWindow from "@/components/ChatWindow";
import PersonalDevelopmentReport from "@/components/PersonalDevelopmentReport";
import { StrategicPersonaSelector } from "@/components/StrategicPersonaSelector";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { type ComplexScenario, type ScenarioPersona, getComplexScenarioById, scenarioPersonas } from "@/lib/scenario-system";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

type ViewState = "scenarios" | "strategic-planning" | "chat" | "feedback";

export default function Home() {
  const [currentView, setCurrentView] = useState<ViewState>("scenarios");
  const [selectedScenario, setSelectedScenario] = useState<ComplexScenario | null>(null);
  const [selectedPersona, setSelectedPersona] = useState<ScenarioPersona | null>(null);
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [strategicConversationId, setStrategicConversationId] = useState<string | null>(null);
  const [completedConversations, setCompletedConversations] = useState<string[]>([]);
  const [currentPhase, setCurrentPhase] = useState(1);
  const [totalPhases, setTotalPhases] = useState(1);

  // ÎèôÏ†ÅÏúºÎ°ú ÏãúÎÇòÎ¶¨Ïò§ÏôÄ ÌéòÎ•¥ÏÜåÎÇò Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const { data: scenarios = [] } = useQuery({
    queryKey: ['/api/scenarios'],
    queryFn: () => fetch('/api/scenarios').then(res => res.json())
  });

  // ‚ö° ÏµúÏ†ÅÌôî: Î∂àÌïÑÏöîÌïú Ï†ÑÏ≤¥ ÌéòÎ•¥ÏÜåÎÇò Ï°∞Ìöå Ï†úÍ±∞ (ÏÑ±Îä• Í∞úÏÑ†)
  // ScenarioSelectorÏóêÏÑú ÏãúÎÇòÎ¶¨Ïò§Î≥Ñ ÌéòÎ•¥ÏÜåÎÇòÎ•º ÏßÅÏ†ë Ï†ÑÎã¨Î∞õÏùå

  // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ (Ïã§Ï†úÎ°úÎäî Ïù∏Ï¶ù ÏãúÏä§ÌÖúÏóêÏÑú Í∞ÄÏ†∏Ïò¨ Í≤É)
  const playerProfile = {
    position: "Ïã†ÏûÖ Í∞úÎ∞úÏûê",
    department: "Í∞úÎ∞úÌåÄ",
    experience: "6Í∞úÏõîÏ∞®"
  };

  // ÏãúÎÇòÎ¶¨Ïò§ ÏÑ†ÌÉù Ï≤òÎ¶¨ - ÌéòÎ•¥ÏÜåÎÇò ÏàòÏóê Îî∞Îùº Î∂ÑÍ∏∞
  const handleScenarioSelect = (scenario: ComplexScenario, persona?: ScenarioPersona, convId?: string) => {
    setSelectedScenario(scenario);
    
    // ÌéòÎ•¥ÏÜåÎÇòÍ∞Ä 2Î™Ö Ïù¥ÏÉÅÏù¥Î©¥ Ï†ÑÎûµÏ†Å Í≥ÑÌöç Îã®Í≥ÑÎ°ú
    if (scenario.personas && scenario.personas.length >= 2) {
      setTotalPhases(scenario.personas.length);
      setCurrentPhase(1);
      setCompletedConversations([]);
      setCurrentView("strategic-planning");
    } else {
      // Îã®Ïùº ÌéòÎ•¥ÏÜåÎÇòÎ©¥ Í∏∞Ï°¥ Î∞©ÏãùÎåÄÎ°ú
      setSelectedPersona(persona || null);
      setConversationId(convId || null);
      setCurrentView("chat");
    }
  };
  
  // Ï†ÑÎûµÏ†Å ÌéòÎ•¥ÏÜåÎÇò ÏÑ†ÌÉù ÏôÑÎ£å Ï≤òÎ¶¨
  const handleStrategicPersonaSelect = async (personaId: string, scenario: ComplexScenario) => {
    try {
      const response = await apiRequest("POST", "/api/conversations", {
        scenarioId: scenario.id,
        personaId: personaId,
        scenarioName: scenario.title,
        messages: [],
        turnCount: 0,
        status: "active",
        conversationType: "sequential",
        currentPhase: currentPhase,
        totalPhases: totalPhases
      });
      
      const conversation = await response.json();
      
      // PersonaSelection Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
      try {
        await apiRequest("POST", `/api/conversations/${conversation.id}/persona-selections`, {
          phase: currentPhase,
          personaId: personaId,
          selectionReason: `${currentPhase}Îã®Í≥Ñ ÎåÄÌôî ÏÉÅÎåÄÎ°ú ÏÑ†ÌÉù`,
          expectedOutcome: "Ìö®Í≥ºÏ†ÅÏù∏ ÎåÄÌôîÎ•º ÌÜµÌïú Î™©Ìëú Îã¨ÏÑ±"
        });
      } catch (error) {
        console.error("ÌéòÎ•¥ÏÜåÎÇò ÏÑ†ÌÉù Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®:", error);
      }
      
      // Ï≤´ Î≤àÏß∏ Ï†ÑÎûµÏ†Å ÎåÄÌôîÎùºÎ©¥ strategic conversation ID Ï†ÄÏû•
      if (!strategicConversationId) {
        setStrategicConversationId(conversation.id);
      }
      
      // ÏãúÎÇòÎ¶¨Ïò§ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ïã§Ï†ú ÌéòÎ•¥ÏÜåÎÇò Í∞ùÏ≤¥ Ï∞æÍ∏∞
      const selectedPersona = Object.values(scenarioPersonas).find(p => p.id === personaId) || null;
      setSelectedPersona(selectedPersona);
      setConversationId(conversation.id);
      setCurrentView("chat");
    } catch (error) {
      console.error("Ï†ÑÎûµÏ†Å ÎåÄÌôî ÏÉùÏÑ± Ïã§Ìå®:", error);
    }
  };
  
  // ÌéòÎ•¥ÏÜåÎÇò Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨ (ÎåÄÌôî ÏôÑÎ£å ÌõÑ)
  const handlePersonaChange = () => {
    if (selectedScenario && selectedScenario.personas && selectedScenario.personas.length >= 2) {
      setCurrentView("strategic-planning");
    }
  };

  const handleChatComplete = () => {
    if (strategicConversationId && currentPhase < totalPhases) {
      // Ï†ÑÎûµÏ†Å ÎåÄÌôî Ï§ëÏù¥Í≥† ÏïÑÏßÅ ÎÇ®ÏùÄ Îã®Í≥ÑÍ∞Ä ÏûàÏúºÎ©¥
      if (conversationId) {
        setCompletedConversations(prev => [...prev, conversationId]);
      }
      setCurrentPhase(prev => prev + 1);
      setCurrentView("strategic-planning");
    } else {
      // Î™®Îì† ÎåÄÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÍ±∞ÎÇò Îã®Ïùº ÎåÄÌôîÎ©¥ ÌîºÎìúÎ∞±ÏúºÎ°ú
      setCurrentView("feedback");
    }
  };

  const handleReturnToScenarios = () => {
    setCurrentView("scenarios");
    setSelectedScenario(null);
    setSelectedPersona(null);
    setConversationId(null);
    setStrategicConversationId(null);
    setCompletedConversations([]);
    setCurrentPhase(1);
    setTotalPhases(1);
  };

  // Ïû¨ÎèÑÏ†ÑÏùÑ ÏúÑÌïú ÏÉàÎ°úÏö¥ ÎåÄÌôî ÏÉùÏÑ±
  const createRetryConversationMutation = useMutation({
    mutationFn: async ({ scenarioId, personaId, scenarioName }: { 
      scenarioId: string; 
      personaId: string; 
      scenarioName: string; 
    }) => {
      const response = await apiRequest("POST", "/api/conversations", {
        scenarioId,
        personaId,
        scenarioName,
        messages: [],
        turnCount: 0,
        status: "active"
      });
      return response.json();
    },
    onSuccess: (conversation) => {
      setConversationId(conversation.id);
      setCurrentView("chat");
    },
    onError: (error) => {
      console.error("Ïû¨ÎèÑÏ†Ñ ÎåÄÌôî ÏÉùÏÑ± Ïã§Ìå®:", error);
    }
  });

  const handleRetry = () => {
    if (selectedScenario && selectedPersona) {
      createRetryConversationMutation.mutate({
        scenarioId: selectedScenario.id,
        personaId: selectedPersona.id,
        scenarioName: selectedScenario.title
      });
    }
  };

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <header className="bg-white border-b border-slate-200 sticky top-0 z-10">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/home" className="flex items-center space-x-3 hover:opacity-80 transition-opacity" data-testid="home-link">
              <div className="w-10 h-10 bg-corporate-600 rounded-lg flex items-center justify-center">
                <i className="fas fa-robot text-white text-lg"></i>
              </div>
              <div>
                <h1 className="text-xl font-bold text-slate-900">üé≠ Roleplay X</h1>
                <p className="text-sm text-slate-600">Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïó≠Îüâ Í∞úÎ∞ú</p>
              </div>
            </Link>
            <div className="flex items-center space-x-2">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <a 
                      href="/admin" 
                      className="hidden md:flex items-center justify-center w-10 h-10 text-corporate-600 hover:text-corporate-700 hover:bg-corporate-50 rounded-lg transition-colors"
                      data-testid="admin-dashboard-link"
                    >
                      <i className="fas fa-chart-bar text-lg"></i>
                    </a>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Í¥ÄÎ¶¨Ïûê ÎåÄÏãúÎ≥¥Îìú</p>
                  </TooltipContent>
                </Tooltip>
                
                <Tooltip>
                  <TooltipTrigger asChild>
                    <a 
                      href="/admin-management" 
                      className="hidden md:flex items-center justify-center w-10 h-10 text-corporate-600 hover:text-corporate-700 hover:bg-corporate-50 rounded-lg transition-colors"
                      data-testid="content-management-link"
                    >
                      <i className="fas fa-cogs text-lg"></i>
                    </a>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>ÏΩòÌÖêÏ∏† Í¥ÄÎ¶¨</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
              
              <button className="text-slate-400 hover:text-slate-600 w-10 h-10 flex items-center justify-center rounded-lg hover:bg-slate-100 transition-colors">
                <i className="fas fa-cog text-lg"></i>
              </button>
            </div>
          </div>
        </div>
      </header>
      {/* Main Content */}
      <main className={`${currentView === "scenarios" ? "py-8 bg-slate-50" : "max-w-6xl mx-auto px-4 py-8"}`}>
        {currentView === "scenarios" && (
          <div className="max-w-6xl mx-auto px-4">
            <ScenarioSelector 
              onScenarioSelect={handleScenarioSelect}
              playerProfile={playerProfile}
            />
          </div>
        )}
        
        {currentView === "strategic-planning" && selectedScenario && (
          <StrategicPersonaSelector
            personas={(() => {
              // ÏãúÎÇòÎ¶¨Ïò§ÏóêÏÑú Î∞õÏùÄ personasÎ•º ScenarioPersona ÌÉÄÏûÖÏóê ÎßûÍ≤å Î≥ÄÌôò
              const scenarioPersonasArray = (selectedScenario.personas || []).map((p: any) => ({
                id: p.id,
                name: p.name,
                role: p.position || p.role,
                department: p.department,
                experience: p.experience,
                personality: {
                  traits: [],
                  communicationStyle: p.stance || '',
                  motivation: p.goal || '',
                  fears: []
                },
                background: {
                  education: '',
                  previousExperience: p.experience || '',
                  majorProjects: [],
                  expertise: []
                },
                currentSituation: {
                  workload: '',
                  pressure: '',
                  concerns: [],
                  position: p.stance || ''
                },
                communicationPatterns: {
                  openingStyle: '',
                  keyPhrases: [],
                  responseToArguments: {},
                  winConditions: []
                },
                image: `https://ui-avatars.com/api/?name=${encodeURIComponent(p.name)}&background=6366f1&color=fff&size=150`,
                voice: {
                  tone: '',
                  pace: '',
                  emotion: ''
                },
                stance: p.stance,
                goal: p.goal,
                tradeoff: p.tradeoff,
                mbti: p.id?.toUpperCase()
              }));
              return scenarioPersonasArray;
            })()}
            personaStatuses={selectedScenario.personas?.map((p: any) => ({
              personaId: p.id,
              name: p.name,
              currentMood: 'neutral' as const,
              approachability: 3,
              influence: p.influence || 3,
              hasBeenContacted: completedConversations.includes(p.id),
              lastInteractionResult: undefined,
              availableInfo: [`${p.name}Ïóê ÎåÄÌïú Ï†ïÎ≥¥`],
              keyRelationships: []
            })) || []}
            currentPhase={currentPhase}
            totalPhases={totalPhases}
            onPersonaSelect={async (selection) => {
              await handleStrategicPersonaSelect(selection.personaId, selectedScenario);
            }}
            onPhaseComplete={() => {
              setCurrentView("feedback");
            }}
            previousSelections={[]}
            scenarioContext={selectedScenario}
          />
        )}
        
        {currentView === "chat" && selectedScenario && selectedPersona && conversationId && (
          <ChatWindow
            scenario={selectedScenario}
            persona={selectedPersona}
            conversationId={conversationId}
            onChatComplete={handleChatComplete}
            onExit={handleReturnToScenarios}
            onPersonaChange={strategicConversationId ? handlePersonaChange : undefined}
          />
        )}
        
        {currentView === "feedback" && selectedScenario && selectedPersona && conversationId && (
          <PersonalDevelopmentReport
            scenario={selectedScenario}
            persona={selectedPersona}
            conversationId={conversationId}
            onRetry={handleRetry}
            onSelectNewScenario={handleReturnToScenarios}
          />
        )}
      </main>
      {/* Footer */}
      <footer className="bg-white border-t border-slate-200 py-8 mt-16">
        <div className="max-w-6xl mx-auto px-4">
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="text-sm text-slate-600 mb-4 md:mb-0">
              ¬© AI Î°§ÌîåÎ†àÏûâ ÌõàÎ†® ÏãúÏä§ÌÖú
            </div>
            <div className="flex items-center space-x-6 text-sm text-slate-600">
              <a href="#" className="hover:text-corporate-600">ÎèÑÏõÄÎßê</a>
              <a href="#" className="hover:text-corporate-600">Î¨∏ÏùòÌïòÍ∏∞</a>
              <a href="#" className="hover:text-corporate-600">Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
